std::vector<real> find_mu(const mat &H, const int order, int NR) {
    std::vector<real> mu = std::vector<real>(order, 0);

    // create a random number generator
    std::random_device rd;  // obtain a random seed from the OS
    std::mt19937 eng(rd());  // seed the generator
    std::uniform_real_distribution<real> distr(0, 2 * M_PI);  // define the range of the distribution

#pragma omp parallel for
    for (int i = 0; i < NR; i++) {
        vec v(H.cols());
        for (auto &j : v){
            j = std::exp(distr(eng) * 1if);
        }
        v.normalize();
        vec T0 = v;
        vec T1 = H * v;
        vec T2;
        std::complex<real> weight = 0;
        std::cout << "doing the " << i + 1 << " R" << std::endl;
        for (int j = 0; j < order; j++) {
            weight = v.adjoint() * T0;
            mu[j] += weight.real();
            T2 = 2 * H * T1;
            T2 -= T0;
            T0 = T1;
            T1 = T2;
        }
    }

    return mu / NR;
}

mat H2D(const int L, const real T) {
    int N = L * L;
    mat H = mat(N, N);

    for (int i = 0; i < N; i++) {
        if (i + 1 < N && ((i + 1) % L != 0)) {
            H.insert(i, i + 1) = -T;
        }
        if (i - 1 >= 0 && ((i) % L != 0)) {
            H.insert(i, i - 1) = -T;
        }
        if (i + L < N) {
            H.insert(i, i + L) = -T;
        }
        if (i - L >= 0) {
            H.insert(i, i - L) = -T;
        }
    }
    return H;
}

mat H1D(const int L, const real T) {
    mat H = mat(L, L);
    H.setZero();
    H.reserve(2 * L);
    for (int i = 0; i < L; i++) {
        if (i - 1 >= 0) {
            H.insert(i - 1, i) = -T;
        }
        if (i + 1 < L) {
            H.insert(i + 1, i) = -T;
        }
    }
    return H;
}

mat H3D(int L, real t) {
    int N = L * L * L;
    mat H = mat(N, N);

    for (int i = 1; i <= N; i++) {
        if (i - 1 > 0 && (i - 1) % L != 0) {
            H.insert(i - 1, i - 1 - 1) = t;
        }
        if (i + 1 <= N && i % L != 0) {
            H.insert(i - 1, i + 1 - 1) = t;
        }
        if (i + L <= N) {
            H.insert(i - 1, i + L - 1) = t;
        }
        if (i - L > 0) {
            H.insert(i - 1, i - L - 1) = t;
        }
        if (i + L * L <= N) {
            H.insert(i - 1, i + L * L - 1) = t;
        }
        if (i - L * L > 0) {
            H.insert(i - 1, i - L * L - 1) = t;
        }
    }
    return H;
}

//writes submatrix into matrix. i and j are top left corners.
void write_sub_marix(mat &tgt, const sub_mat &matrix, int i, int j) {
    int n = matrix.cols();
    for (int x = 0; x < n; x++) {
        for (int y = 0; y < n; y++) {
            tgt.insert(i + x, j + y) = matrix(x, y);
        }
    }
}

//hamiltonian for weyl model
//L is number of units cells and so number of atoms is (2*L)^3
mat HG(int L, real t, real tp, real m) {
    int N = (2 * L) * (2 * L) * (2 * L);
    mat H(N, N);

    sub_mat sx{{0, 1,},
               {1, 0}};
    sub_mat sy{{0,  -1if,},
               {1if, 0}};
    sub_mat sz{{1, 0},
               {0, -1}};

    sub_mat Tx = (t / 2) * sz + (tp / 2) * sx;
    sub_mat Ty = (t / 2) * sz + (tp / 2) * sy;
    sub_mat Tz = (t / 2) * sz;
    sub_mat diag = -m * sz;

    //2*3 sub matrices for forward and back and one diagonal.
    H.reserve(Eigen::VectorXi::Constant(N, 7 * 2));

    //we are going by two as we are iterating by unit cell
    for (int i = 0; i < N; i += 2) {
        if (i % (N / 100) == 0 || i % (N / 100) == 1) {
            std::cout << "H: " << (real(i) / real(N)) * 100 << std::endl;
        }
        write_sub_marix(H, diag, i, i); // writing diagonale4
        if ((i + 2 + 1 < N) and (i + 2) % (2 * L) != 0) {
            write_sub_marix(H, Tx, i, i + 2); // writing nu=x
            write_sub_marix(H, Tx, i + 2, i);
        }

        if ((i + (2 * L) + 1 < N) and (i) % (2 * L * L) < 2 * (L - 1) * L) {
            write_sub_marix(H, Ty, i, i + (2 * L)); // writing nu=y
            write_sub_marix(H, Ty, i + (2 * L), i);
        }
        if (i + (2 * L) * (2 * L) + 1 < N) {
            write_sub_marix(H, Ty, i, i + (2 * L) * (2 * L)); // writing nu=y
            write_sub_marix(H, Ty, i + (2 * L) * (2 * L), i);
        }
    }
    return H;
}

void writeMatrixToCSV(const std::string &filename, const mat &matrix) {
    // Open the file stream
    std::ofstream file(filename);

    // Write the matrix to the file
    for (int i = 0; i < matrix.cols(); i++) {
        for (int j = 0; j < matrix.cols(); j++) {
            auto t = matrix.coeff(i, j);
            file << t.real();
            if (j + 1 < matrix.cols()) {
                file << ',';
            }
        }
        file << "\n";
    }

    // Close the file stream
    file.close();
}
